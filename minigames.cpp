#include "Skyline.h"
//#include "minigames.h"
#define N 9 //высота, ось ОУ 
#define M 30//широта, ось ОХ

/*
**Мииигра "Отмычка" (ранее "Замочек" или "Ключик")
**
*******************************************
** игроку даётся возможность взломать замок отмычкой:
** для этого нужно в определённый момент поднять отмычку в замке.
** будьте осторожны, отмычка может сломаться вместе с замком, если её поднять невовремя
*******************************************
**
*/
void skeletonKey(int* res)
{
	//объявляем динамический двумерный массив
	char** Map = new char*[N];
	for (int i = 0; i < N; i++)
	{
		Map[i] = new char[M];
	}

	//задаём начальную карту
	char a[N][M] =
	{
		{ '|','|','|','|','|','|','|','|','|','|','|','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' },
		{ '|','|','|','|','|','|','|','|','|','|','|','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' },
		{ '/','/','/','/','/','/','/','/','/','/','/','/',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' },
		{ '|','|','*','|','|','@','|','|','*','|','|','/',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' },
		{ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','&','=','=','=','=','=','=','=','=','=','=','=','#','#','#','#','#','#','#' },
		{ '|','|','|','|','|','|','|','|','|','|','|','/',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' },
		{ '/','/','/','/','/','/','/','/','/','/','/','/',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' },
		{ '|','|','|','|','|','|','|','|','|','|','|','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' },
		{ '|','|','|','|','|','|','|','|','|','|','|','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' },

	};

	//переносим начальную карту в динамический массив
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			Map[i][j] = a[i][j];
		}
	}

	//определяем строку, где передвигается отмычка
	int fix_y = 0;
	for (int i = 0; i < N; i++)
	{
		if (Map[i][0] == ' ')
		{
			fix_y = i;
		}
	}

	moveSK(Map, fix_y, M, N, res);//передвижение отмычки(процесс игры)

	//удаление динамического двумерного массива
	for (int i = 0; i < N; i++)
	{
		delete[]Map[i];
	}
	delete[]Map;
}

// функция вывода игровой карты в консоль
void showMap(char** map, int y, int x/*, int coins, int hp*/)
{
	//printInterBlue(coins, hp);
	for (int i = 0; i < y; i++)//перебор по вертикали
	{
		for (int j = 0; j < x; j++)//перебор по горизонтали
			cout << map[i][j];
		cout << endl;
	}
	//printInterGreen();
}

// функция передвигает отмычку и
void moveSK(char** map, int fix_y, int x, int y, int* res)
{
	COORD coord = { 0,0 };                        //координаты курсора в консоли;
	HANDLE hout = GetStdHandle(STD_OUTPUT_HANDLE);//получаем handle консоли;

	int determinant = -1;
	int result = 0;
	int sensor = 11;
	while (result == 0)
	{
		if (determinant == -1)
		{
			char m = map[fix_y][0];
			for (int i = 0; i < x - 1; i++)
			{
				map[fix_y][i] = map[fix_y][i - determinant];
			}
			map[fix_y][x - 1] = m;
			sensor--;
			showMap(map, y, x);
			Sleep(100);
			result = ifUseSK(map, fix_y, sensor);
			if (map[fix_y][0] == '&') determinant = 1;
		}
		else
		{
			char n = map[fix_y][x - 1];
			for (int j = x - 1; j > 0; j--)
			{
				map[fix_y][j] = map[fix_y][j - determinant];
			}
			map[fix_y][0] = n;
			sensor++;
			showMap(map, y, x);
			Sleep(100);
			result = ifUseSK(map, fix_y, sensor);
			if (map[fix_y][x - 1] == '#') determinant = -1;
		}

		SetConsoleCursorPosition(hout, coord);//устанавливаем курсор по координатам 
											  //(устраняем "мигание" экрана при обновлении карты)
	}
	inputResult(result, res);
}

// если совершена попытка открыть замок, эта функция определяет результат попытки
int ifUseSK(char** map, int y, int x)
{
	int result = 0;
	if (_kbhit())
	{
		if (map[y - 1][x] == '@')
		{
			result = 1;
		}
		else result = 2;
	}
	return result;
}

// вывод результата попытки
void inputResult(int a, int* res)
{
	if (a == 1)
	{
		system("cls");
		cout << "*   *  ***  *   *   *   * ***** *   *\n"
			<< " * *  *   * *   *   *   *   *   **  *\n"
			<< "  *   *   * *   *   *   *   *   * * *\n"
			<< "  *   *   * *   *   * * *   *   *  **\n"
			<< "  *    ***   ***     * *  ***** *   *";
		*res=*res+1;///////
	}
	if (a == 2)
	{
		system("cls");
		cout << "*   *  ***  *   *   *      ***   ***  *****\n"
			<< " * *  *   * *   *   *     *   * *     *    \n"
			<< "  *   *   * *   *   *     *   *  ***  *****\n"
			<< "  *   *   * *   *   *     *   *     * *    \n"
			<< "  *    ***   ***    *****  ***   ***  *****";
	}
	Sleep(3000);
}

